1. js
  前端三要素？
    html
    css
    js    
      ES    核心 最重要   
        语法
        类型
        语句
        关键字 保留字
        操作符
        对象    
      DOM   文档对象模型
        用来控制网页内容和结构的
      BOM   浏览器对象模型
        操作浏览器窗口（移动窗口位置、调整窗口大小、新建窗口）
        alert()
        ...
  ECMAScript
    元素 
      <script> 在html中使用js代码必备的一个元素
        使用：
          方式1：在html的head中使用（常用） 引入外部的js文件
          方式2：在body标签后使用 <script> js代码 </script>
      <noscript> 浏览器不支持js的时候，该元素内部的文本会被渲染
        使用：在body标签内部使用
        <noscript>您的浏览器不支持JavaScript</noscript>
    语法
      区分大小写
        变量 函数名 操作符 区分大小写
        true True
        var a = 1
        A
      标识符
        变量名、函数参数、属性名..
        第一个字符必须是 字母、下划线_或者$(不能以其他字符或者数字开头)
        剩下的字符可以是 字母、下划线_ $ 或者数字
        一般使用驼峰命名法去命名
        getName()
      注释
        单行注释
          // 注释内容
        多行注释
          /* 
            注释内容
            注释内容
          */
      语句
        推荐以分号结尾
      变量
        类型
          宽松的
          var a
          a = 1
          a = "1"
          if(a===1){
            //
          }
          a = true
        声明  
          var let const
          建议多使用let 和 const
        数据类型
          undefined
          null
          boolean
          number
          string
          symbol

          object
      保留字、关键字
        break do if else case typeof
      流程控制语句
        if
          if(){

          }
          if(){

          }else{

          }
          if(){

          }else if(){
            
          }else{

          }
        while
          while-do
            先测试循环语句
            while(){

            }
          do-while
          后测试循环语句
          do{

          }while()
        switch
          case 1：
            break
          default：

        for(){

        }
      对象
        常用的创建对象方式
          1. 创建Object实例
            let person = new Object();
            person.name = "tom";
            person.sayName = function(){
              console.log(this.name)
            }
          2. 字面量
            let person = {
              name:tom,
              sayName(){
              console.log(this.name);
              }
            };
        内部属性
          1. 数据属性
            数据属性包含一个保存数据值的位置，值会从这个位置读取，也会写入到这个位置。数据属性有四个特性描述他的行为。
              [[Configurable]]:表示属性是否可以通过delete删除并且重新定义，是否可以修改他的特性 默认情况为true
              [[Enumerable]]:表示是否可以通过for-in循环返回 默认情况为true
              [[Writable]]:表示属性的值是否可以被修改 默认情况为true
              [[Value]]:包含属性实际的值
              在调用Object.defineProperty()时，configurable enumerable writable如果不指定 那么都默认为false
          2. 访问器属性
            访问器属性不会包含数值 但是包含两个不必须的函数 getter setter 
              [[Configurable]]:表示属性是否可以通过delete删除并且重新定义，是否可以修改他的特性 默认情况为true
              [[Enumerable]]:表示是否可以通过for-in循环返回 默认情况为true
              [[Get]]:获取函数，在读取属性时调用 默认值undefined
              [[Set]]:设置函数，在设置属性时调用 默认值undefined
            Object.defineProperty()
        合并对象
          Object.assign() 这个方法接收一个目标对象 和一个或多个源作为参数 然后将每个源中的属性复制到目标对象
            会修改目标对象 同时返回值也是修改过后的目标对象
            复制是如果有相同属性 会使用最后一个复制的值
            如果在复制过程中发生错误，可能只完成部分的复制，也不会回到复制之前的状态
        对象的相等判定
          ===
          Object.is()
        对象的简写
        对象的解构
        创建对象    
          通过构造函数和字面量创建对象的缺点：如果需要创建具有同样接口的多个对象，要写很多重复的代码

          工厂模式
            function createPerson (name, age, gender, like) {
              let o = new Object();
              o.name = name;
              o.age = age;
              o.gender = gender;
              o.like = like;
              o.sayName = function () {
                console.log(this.name);
              }
                return o;
            }

            let p1 = createPerson("p1", 23, "男", [''])
            let p2 = createPerson("p2", 24, "男", ['🍇'])
            let p3 = createPerson("p2", 25, "男", ['🍍'])
            工厂模式创建的对象是Object 不能知道具体的类型

          构造函数模式
            function Person (name, age, gender, like) {
              this.name = name;
              this.age = age;
              this.gender = gender;
              this.like = like;
              this.sayName = function () {
                console.log(this.name);
              }
            }
            let p4 = new Person("p4", 24, "男", ['🍇'])
          原型模式

          使用构造函数和原型相结合的方式
      类
        class
        定义
          类声明
            class Person {}
          表达式
            const Animal = class {}
            函数的声明可以提升
            类的声明不可以提升
            函数受函数作用域限制
            类受块作用域限制
          类的构成
            包含构造函数方法、实例方法、获取函数、设置函数和静态类方法(都不是必须的)
            空类的定义
            class Person {}
            有构造函数的类
            class Bar {
              constructor(){}
            }
            有获取函数的类
            class Bar {
              get myBar(){}
            }
            有静态方法的类
            class Bar {
              static myBar(){}
            }
          类构造函数
            class Animal { }
            class Person {
              constructor(name) {
                console.log("person");
                this.name = name || "Null!"
              }
            }
            class Vegetable {
              constructor() {
                this.color = "red"
              }
            }
            let a = new Animal();
            类实例化的时候传入的参数会作为类构造函数的参数
            let p = new Person();
            如果不需要参数，类名后面的括号是可以省略的
            let p1 = new Person;
            let p2 = new Person("TOM");
            console.log(p.name);
            console.log(p1.name);
            console.log(p2.name);
            let v = new Vegetable();
            console.log(v.color);
          类静态方法
            class Person {
              constructor(name) {
                console.log("person");
                this.name = name || "Null!"
              }
              static sayHello () {
                console.log("hello");
              }
            }
            Person.sayHello()
      函数
        介绍
          函数表达式、函数声明和箭头函数
          默认参数及扩展操作符
          函数也是对象 Function是引用类型 所以函数名是指向函数对象的指针
        函数的声明和箭头函数
          所以不带括号的函数名会访问函数的指针
          // 普通方式
          function add (num1, num2) {
            console.log(num1 + num2);
          }
          // 函数表达式
          let add = function(){
            console.log(num1 + num2);
          }
          // 箭头函数（ES6新增的）
          参数列表的括号()：如果只有一个参数，可以不加括号，如果有多个参数或者没有参数，那么要加括号()
          函数体的括号{}:也可以不加,但是要注意：使用大括号就意味着包含函数体，可以包含多条语句，如果不用大括号，箭头后面就只能有一行代码，而且，省略大括号会隐式的返回这行代码的值
            let result = (x) => { return 3 * x; };
            let result2 = (x) => 3 * x;
          箭头函数不能使用arguments、super和new.target,也不能用作构造函数，也没有prototype属性
          let add = (num1,num2) => {
            console.log(num1 + num2);
          }
          let add = () => {
            console.log();
          }
          let add = a => {
            console.log(a);
          }
          // 使用Function构造函数(不建议使用：1.影响性能 2.代码可读性不高)
          let add = new Function('num1','num2','console.log(num1 + num2)');
        函数名
          函数名是指向函数对象的指针
          name
            所有函数对象都会暴露一个只读的name属性，包含函数的信息 
            多数情况 name保存的是函数的标识符 
            如果函数是匿名函数 返回的是空字符串  
            、如果是通过new Function构造函数创建的 返回anonymous
          参数
            介绍
              ES不关心参数传入的个数 可以多传、少传甚至不传参数，解释器都不会报错
              没有重载的概念
            arguments对象
              在使用function关键字定义函数（非箭头函数）时，在函数内部就可以访问arguments对象
              arguments是一个类数组对象
                console.log(arguments); // 类数组对象
                console.log(arguments[0]); // 第一个参数
                console.log(arguments[1]); // 第二个参数
                console.log(arguments.length);  // 参数的数量 
              包含调用函数时传入的所有参数
              属性：  
                1. length
                  console.log(arguments.length);  // 参数的数量 
                2. callee 指向arguments对象所在函数的指针
            默认参数
              function add (num1, num2 = 10) {
                console.log(num1 + num2);
              }
              arguments只会拿到传给函数的参数 不会拿到默认值 
              一个函数有多个参数时，具有默认值的要放在后面声明
              暂时性死区:前面定义的参数不能引用后面定义的
                // 正常情况
                function add (num1 = 10, num2 = num1) {
                  console.log(num1 + num2);
                }
                add();
                // 不正常情况
                function add (num1 = num2, num2 = 11) {
                  console.log(num1 + num2);
                }
                add();
            扩展参数
              ...
              let arr = [1, 2, 3, 4];
              function getSum () {
                let sum = 0;
                for (let i = 0; i < arguments.length; i++) {
                  sum += arguments[i];
                }
                return sum
              }
              console.log(getSum(...arr));
              console.log(getSum(0, ...arr, 5, ...[6, 7, 8]));
          声明与表达式
            函数声明的提升
            // 不报错
            console.log(addTest(5, 6));
            function addTest (num1, num2) {
              return num1 + num2
            }
            // 会报错
            console.log(addTest2(5, 6));
            let或var都报错
            let addTest2 = function (num1, num2) {
              return num1 + num2
            }
          函数作为值
            function addTest (num1, num2 = 10) {
              return num1 + num2
            }
            function newAddFunction (someFunction, argument) {
              return someFunction(argument)
            }
            let result5 = newAddFunction(addTest, 5)
            console.log('🤡 CC - result5', result5)
          this对象
            在标准函数中 this是指把函数当成方法调用的上下文对象
              在网页中，this指向window
            在箭头函数中 this指向定义箭头函数的上下文this
          caller  这个属性引用的是调用当前函数的函数
          new.target
            如果函数是正常调用的，则new.target的值是undefined
            如果使用new关键字调用的，new.target将引用被调用的构造函数
          length
            表示的是函数命名参数的个数
          prototype
            保存引用类型所有实例方法的地方
          call & apply
            add.apply(this, arguments)
            add.apply(this, [num1, num2])
            add.call(this, num1, num2)
            sayColor.call(this)
            sayColor.call(window)
            sayColor.call(obj)
      代码优化
        自己要写代码，花时间维护自己或者别人写的代码
        可维护的代码特点：
          容易理解：不需要求助别人，不需要求助原开发者，看一眼就知道是做什么的
          符合常识：代码中的内容都是顺理成章的
          容易适配：即使数据发生了变化以不用完全重写
          容易扩展：代码架构、方法考虑封装，支持未来的扩展
          容易调试：出现问题之后能够很容易的定位到问题
        编码规范：
          1. 可读性
            1. 同一个项目中 缩进要保持统一（如果是团队协作的项目那也要注意）
            2. 需要出现代码注释的地方：
              1. 每个函数和方法 ，都应该有注释，用来描述他完成的任务，以及他所用的算法
              同时也要写清楚每个函数的参数的含义 方法使用的前提 以及返回值是什么（是否有返回值）
              2. 大型代码块 多行代码 但是是完成单个任务的 应该给出注释 把完成的任务写清楚
              3. 复杂的算法 要通过注释解释明白，方便别人看懂，方便自己维护的时候看懂
              4. 处理浏览器兼容性问题 safari 、 chrome 要加注释说明这是解决的哪个浏览器的什么问题，避免被别人误以为代码没有用而给删除掉，导致兼容性问题再次出现
          2. 命名规范（变量和函数）
              变量名一般要使用名词 person cat name  不建议使用 a b c 这类型的
              函数名一般要以动词开头 getPersonName() getCatName()，如果返回值是boolean类型的函数可以用is开头 isEnabled()
              对于变量和函数的命名优先考虑可读性 而不是长度
              变量和函数的命名一般以小写字母开头，使用驼峰命名法
              类名首字母要大写 Person Car
              常量全部字母大写 然后用下划线分割 URL REQUEST_TIMEOUT
              要避免没有实际意义的命名，比如：doSomeThing() 比如 a b c 
          3. 变量类型透明化
              方法1 通过注释添加类型
                let name = "张三"; // 字符串 描述一个人的名字
                ...
                name
              方法2 匈牙利表示法
                let sName = "张三"
                let bFlag = true
                let iCount = 10
                let oPerson = {}
          4. 降低耦合度
            代码耦合度太高会导致代码难以维护，要尽量降低耦合度
            1. 解耦HTML和JavaScript
              使用script标签引入外部js文件 而不是直接在script标签内写js代码
            2. 解耦CSS和JavaScript
              减少dom操作直接设置样式，而改为通过dom操作给元素修改类名去体现对应的样式
            3. 解耦事件处理程序和应用程序逻辑
              比如我要实现 按下回车键 弹出一个小窗口
              function handleKeyPress (event){
                  if(event.keyCode == 13){
                    // 回车键被按下
                    alert(1)
                    log(1)
                  }
              }
              比较合理的写法
                function handleKeyPress (event){
                  if(event.keyCode == 13){
                    // 回车键被按下
                    event()
                  }
                }
                function event(){
                  alert(1)
                  log(1)
                }
          5. 尽可能的封装
            同样的代码出现过两次或以上，就要考虑封装 不要重复造轮子
          6. js中原生方法的运行速度是较快的 尽可能多使用原生方法 比如Math里的方法
          7. 复杂的if-else语句应该替换为switch语句 switch语句运行较快 将最可能执行到的条件放到switch靠上的部分 执行可能行较小的放到下面 来提高代码效率
          8. 语句最少化
            1. 多个变量声明
              let a = 1;
              let b = 2;
              let c = 3;
              建议改为
              let a = 1, b = 2, c = 3;
            2. 插入迭代值
              let name = item[i];
              i++;
              建议改为
              let name = item[i++];
            3. 使用字面量的方式创建数组或者对象
              let person = new Object();
              person.name = "张三";
              person.age = 23;
              person.gender = "男";
              建议改为
              let person = {
                name: "张三",
                age: 23,
                gender: "男",
              };
      变量原始值与引用值区别
        介绍：
          原始值是最简单的数据 按值访问 
            undefined，null，boolean，number，string，symbol
          引用值是由多个值构成的 按引用访问 
            object
        属性：
          原始值不能有属性
          引用值可以有属性
        复制：
          原始值复制到的内容是独立的 互不影响的
            num2  Number  5
            num1  Number  5
          引用值复制 实际上复制的是一个指针，指向储存在堆内存中的对象 所以我们对obj1和obj2的操作 都是操作的同一个对象
            obj2  Object  指针
            obj1  Object  指针
        参数传递
          在ES中所有函数的参数传递都是按值传递
          原始值 变量复制 将原始值的变量复制一份 传递到函数中 函数内的操作 不影响原始值本身
          引用值 也是按值传递
        类型判断
          typeof 操作符判断类型 对原始值很有作用 但是对于引用值的用处不大 
          instanceof 一般来判断引用值 检测任何引用值和Object的构造函数都会返回true 检测原始值 始终返回false
        变量声明
          var 
            var声明变量会被自动添加到最接近的上下文
            var声明会被拿到函数或者全局作用域的顶部，位于作用域中的所有代码之前，叫做变量声明提升
          let 
            let有作用域是块级的
            let不能重复声明同一个变量
            let声明前不能使用变量
          const 
            常量声明
            const声明变量时必须要初始化 而且之后不可以修改 
            注意：
              原始值的值不可以修改
              引用值 对象的属性是可以修改的
    客户端存储
    cookie
      cookie 网景
        最初用于在客户端存储会话信息 要求服务器在响应http请求时，发送Set-CookieHTTP头部包含会话信息
        Set-Cookie:name=value
      cookie的限制
        cookie是与特定的域绑定的
        浏览器会限制cookie的大小
          不要超过300个cookie
          每个cookie不要超过4096字节
          每个域不超过20个cookie
          每个域不超过81920字节
      cookie的构成
        名称：唯一标识cookie 不区分大小写 必须经过URL编码
        值： 存在cookie里的字符串值 必须经过URL编码
        域-domain：cookie有效域
        路径-path：请求的URL中包含响应的路径 才会发送cookie
        过期时间-expires：表示何时删除cookie
        安全标识-secure：设置之后 可以只在https的情况下发送cookie 在http的情况下不发送  Set-Cookie:name=value;domain=.baidu.com; secure
      在JavaScript中使用cookie
        document.cookie
          所有名称和值都经过URL编码 所以要解码 decodeURIComponent()
        设置cookie 
          document.cookie = "name=99999999999"
        子cookie 在一个cookie里储存多个键值对
          document.cookie = "name=name1=value&name2=value2"
      注意
        cookie不要存敏感 重要的信息 不要存卡号、密码、地址等信息 注意加密
    Web Storage
      提供了在cookie之外存储会话数据的途径
      提供跨会话存储大量数据的机制 
      localStorage 持久化存储 不随着会话 的消失而消失 5M
      sessionStorage 会话存储技术 会话关闭 session消失 会话恢复 session恢复
        // 使用方法添加值
        sessionStorage.setItem('name', 'session')
        // 使用属性添加值
        sessionStorage.newName = 'new-session'
        console.log(sessionStorage.getItem('newName'));
        console.log(sessionStorage.newName);
        // 使用方法删除值
        sessionStorage.removeItem('newName')
        // 使用delete删除值
        delete sessionStorage.name
    IndexedDB
      特点
        是浏览器中存储结构化数据的一个方案 
        方便JavaScript对象的存储和获取，也支持查询和搜索
        异步操作
        2017年就获得主流浏览器的支持
      详情
        IndexedDB是类似于MySQL的数据库 但是他使用的是对象存储 
        他不是关系型数据库 不支持SQL查询语句
        键值对存储（ key - value ） 内部采用对象仓库存放数据 每个数据都有一个主键，主键是独一无二的 否则就会抛出错误
        异步操作 操作时不会锁死浏览器 用户依然可以进行其它操作  这和localStorage形成对比 为了防止在读写大量数据的时候拖慢网页
        支持事务 意味着在一系列操作中 只要有一步失败 整个事务就会取消 数据库就会回滚到事务发生之前的状态 不存在只改写一部分数据的情况
        同源限制 每个数据库和创建他的域名对应，每个网页只能访问自身域名下的数据库 不能跨域访问
        储存空间大 一般情况最少是250M 甚至没有上限
        支持二进制存储 不仅可以存储字符串 还可以存储二进制数据
      使用
        open() 打开或者创建数据库
          version 指定数据库版本 类似于软件app的版本 只能为整数由1开始递增
          let db, request, version = 1;
          request = indexedDB.open("admin", version);
          request.onerror = (e) => {
            console.log(`'数据库打开失败，错误码：'${e.target.errorCode}`);
          }
          request.onsuccess = (e) => {
            console.log('🤡 CC - e', e.target.result)
          }
        获取db容器
          request.onsuccess = (e) => {
            db = e.target.result; // 获取数据库对象容器
          }
          获取到数据库容器后 就可以对数据库进行下一步操作
          这里是异步操作 所以只能继续在onsuccess里面进行
        objectStore
          是数据存储仓库，一个objectStore就类似于mysql中的一张表，存放着数据记录
            key1 value1
            key2 value2
            key3 value3
            ...   ...
            key value
          key
            通过key 获取value
            key的两种形态
              1. inline key被包含在value中
                key     value
                1001    {id:1001,name:"tom"}
              2. outline key不被包含在value中 这种情况下可以开启autoIncrement
                key     value
                1       AsdfcphuIPNBOUybOBJHoBO
          keyPath
            keyPath的作用就是为了读取key
            获取一个节点值的属性链式方法的字符串表达
              {
                peoples:[
                  {name:'tom',age:23},
                  {name:'jarry',age:26}
                ]
              }
            如果要获取第一个人的name那么 keyPath就是 peoples[0].name
          如何创建 objectStore 
            db.createObjectStore('myStore', {
              keyPath: 'id'
            })
            一个db中只允许有一个同名的objectStore，所以当我们第二次创建的时候就会报错
            objectStore创建后不可以修改，如果创建时发生了失误，那么要先删除，再重新创建
          类型  
            对象型仓库
              objectStore是用来存对象的 所以要规定keyPath 如果对象不存在对应的keyPath就会报错
              {
                id:1001,// key
                name:"str"
              }
              db.createObjectStore('myStore',{keyPath:'id'})
            非对象型仓库
              objectStore不是用来存对象的 那么创建的时候就要传 autoIncrement 而不传keyPath
              db.createObjectStore('myStore',{autoIncrement:true})
            混合型仓库
              db.createObjectStore('myStore',{keyPath:'id',autoIncrement:true})
        version
          如果需要新增objectStore就要修改version 一个数据只能有有个version 升级了新的之后就不能使用旧的
          version必须为正整数
        事务
          任何时候想要读取或者修改数据都要通过事务进行
          创建
            如果不指定参数，那么创建的事务对于数据库中的对象存储有只读权限
            let transaction = db.transaction();
            一般情况会指定参数，确保在事务期间只加载指定的对象
            let transaction = db.transaction('myStore');
            如果想访问多个对象 可以传递数组
            let transaction = db.transaction(['myStore','myStore2']);
            还可以加第二个参数，修改访问方式 readonly readwrite
            let transaction = db.transaction('myStore',"readwrite");
        添加数据
          add() 新增
          request = store.add(user);
          put() 更新
          如果在操作时对象中已经存在同名的键时 那么add就会报错 而put不会
        更新数据
          put()
        删除数据
          delete(主键)
          request = store.delete(2);
        获取数据
          get()
            request = store.get(1);
            request.onsuccess = (e) => {
              console.log('查询到的数据是:');
              console.log(e.target.result);
            };
        获取多条数据
          在事务中创建一个游标 参考代码文件
2. vue
  vue3创建项目
    方式1.  
      脚手架： vue-cli
        介绍
          vue-cli是一个全局安装的npm包，提供了终端里的vue命令，可以快速搭建一个新的vue项目
          可以通过vue ui命令 打开一套图形化界面管理项目
        安装脚手架：npm install -g @vue/cli
                  或者
                  yarn global add @vue/cli
        创建项目
          vue create vue3-project
            默认配置
              选择vue3版本
            自定义配置（Manually select features）：看自己需求 选择安装
              ◉ Babel
              ◯ TypeScript
              ◯ Progressive Web App (PWA) Support
              ◉ Router
              ◉ Vuex
              ◉ CSS Pre-processors
              ◉ Linter / Formatter
              ◯ Unit Testing
              ◯ E2E Testing
          cd vue3-project
          npm run serve
          项目创建好了之后想要增加依赖 
            方式1. 在项目目录下使用npm等工具直接安装指定的依赖
            方式2. 在项目的package.json文件中添加想要安装的依赖配置 然后在项目目录下执行npm i
    方式2.
      脚手架： Vite
        npm init vite vue3-project-vite -- --template vue

        ✔ Select a framework: › vue
        ✔ Select a variant: › vue

        cd vue3-project-vite
        npm install
        npm run dev
  vue2和vue3.2的区别
    1. 组件只需要引入，不需要注册 不用写setup函数，也不用写export default
      组件命名
        使用大驼峰HelloWorld 使用的时候可以用hello-world或者HelloWorld
      组件传参
        defineProps
      事件传递
        defineEmits
    2. 变量和方法不需要return 然后可以直接使用
    3. 动态css
      在css中可以通过v-bind绑定state中的变量
    4. ref reactive
      实现响应式数据的方法 把静态数据 变为响应式数据
      reactive是将对象变为响应式数据
      ref     是将某个变量变为响应式数据
      在js代码中 使用ref定义的值需要通过.value来操作
      在vue中 使用ref定义的值不需要通过.value来操作
  组件库的变化
    element
      vue2 https://element.eleme.cn/#/zh-CN     element-ui
      vue3 https://element-plus.gitee.io/zh-CN/ element-plus
    antd
      vue2 https://antdv.com/components/overview
      vue3 https://www.antdv.com/docs/vue/migration-v3-cn
    vant
      vue2 https://vant-contrib.gitee.io/vant/v2/
      vue3 https://vant-contrib.gitee.io/vant/#/zh-CN
  安装vant组件库
    npm i vant
  按需引入vant组件库
    npm i unplugin-vue-components -D
  修改配置文件 修改后重启项目
  组件注册方式
    常用方式1
      import { Button, Cell, CellGroup } from "vant";

      export default defineComponent({
        components: {
          VanButton: Button,
          VanCell: Cell,
          VanCellGroup: CellGroup,
        },
        setup() {
          return {};
        },
      });
    常用方式二
      <script setup>
        import { Button, Cell, CellGroup, Icon, Toast } from "vant";
      <script/>
  特别提醒  
    1.Vant 中有个别组件是以函数的形式提供的，包括 Toast，Dialog，Notify 和 ImagePreview 组件。
      在使用函数组件时，unplugin-vue-components 无法自动引入对应的样式，因此需要手动引入样式。比如
        // Toast
        import { Toast } from 'vant';
        import 'vant/es/toast/style';
        详情可见官网 https://vant-contrib.gitee.io/vant/#/zh-CN/quickstart#4.-yin-ru-han-shu-zu-jian-de-yang-shi
    2. 在使用<script setup>中到如组件时要注意 
        1. 使用组件不要用单标签
        2. 使用组件标签名不要省略 要用全称 <van-cell-group> 或者 <VanCellGroup>
        3. 由于导入的是Button 但是使用的是van-button所以eslint会检测、报错 那么我们要让eslint忽略这个问题 // eslint-disable-next-line no-unused-vars
            <van-cell-group>
              <van-cell
                title="单元格"
                value="内容"
              ></van-cell>
              <van-cell
                title="单元格"
                value="内容"
              ></van-cell>
            </van-cell-group>
            // eslint-disable-next-line no-unused-vars
            import { Button, Cell, CellGroup, Icon, Toast } from "vant";
    3. 移动端响应式适配
      1. 选择插件
      npm install postcss-px-to-viewport --save-dev
      2. 修改配置文件
      3. 重启项目 修改组件bug
      
    4. 处理vant自定义样式的几种方式
      1. 
        <style lang="less">
          :root {
            --van-dialog-border-radius: 8px;
          }
        </style>
      2. 
        <style lang="less" scoped>
          :deep(.van-button) {
            --van-button-primary-background-color: red;
          }
        </style>
      3. 通过 ConfigProvider 覆盖
      4. 通过jsx代码块 自定义组件
      5. 自定义图标的处理
        1. 下载图标 放大
        2. 使用自定义图标库
        3. 插槽
    5. 轮播图插件
      "swiper": "^8.2.6",
        https://swiperjs.com/swiper-api
        https://swiperjs.com/vue
    6. 点击返回按钮后 不在原来的页面了 怎么处理？

    7. 商品详情页 加入购物车按钮颜色

    8. 加入购物车的商品 如果是相同的 要合并
  3. 项目
  移动端项目









git仓库
    最近有一个新变化，开源仓库需要审核
    在创建时不可以直接开源
    开源仓库审核时需要项目有Readme文件
    创建好仓库，上传Readme文件，提交仓库公开申请
    提交申请之后，登录的用户就可以访问这个仓库了 匿名用户还不可以访问
 

如果大家其他平台的密码和学习通的手机号和密码相同 建议大家改一下
以后尽量不要用相同的密码
已知学习通账号密码
  15012341234   123456

去微博尝试
  15012341234   123456
去微信尝试
  15012341234   123456
.....


两周时间


具体时间安排
  26号休一天
  其余时间连着上
  8号答辩